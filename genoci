#!/usr/bin/env python

# genoci: generate oci images from a yaml spec.  See the README.md for
# example usage.
#
# Copyright (C) 2017 Cisco Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from distutils.version import StrictVersion
import os
import os.path
import shutil
import sys
import umoci
import yaml

# by default work in current dir
basedir = os.getcwd()
layoutname="oci"

def parse_config_file(filename):
    configs = {}
    retvalues = {}
    with open(filename, "r") as outfile:
        print("loading yaml file: %s" % filename)
        configs = yaml.load(outfile)
        print(configs)
    if "btrfsmount" in configs:
        x = configs["btrfsmount"]
        retvalues["btrfsmount"] = x
    if "layoutdir" in configs:
        retvalues["layoutdir"] = configs["layoutdir"]
    return retvalues

def parse_config():
    filename = "./atom_config.yaml"
    if os.path.exists(filename):
        return parse_config_file(filename)
    filename = "~/.config/atom/config.yaml"
    if os.path.exists(os.path.expanduser(filename)):
        return parse_config_file(filename)
    return {}

configvalues = parse_config()
lpack_info = {}
if "btrfsmount" in configvalues:
    lpack_info = {"btrfsmount": configvalues["btrfsmount"]}
if "layoutdir" in configvalues:
    basedir, layoutname = os.path.split(configvalues["layoutdir"])

unpackdir = basedir + "/unpacked"

def is_version(x):
    try:
        v = StrictVersion(x)
        return True
    except:
        return False

def do_tag(OCI, tag):
    OCI.DelTag(tag, False)
    OCI.Tag(tag)
    newtag = OCI.NextVersionTag(tag)
    OCI.AddTag(tag, newtag)

# TODO - handle arguments
def run_file(OCI, fname):
    return OCI.RunInChroot(fname)

def run_shell(OCI, shell):
    return OCI.ShellInChroot(shell)

OCI = umoci.Umoci(basedir, layoutname, lpack_info)

if len(sys.argv) < 2:
    usage()
    sys.exit(1)
if sys.argv[1] == "-h" or sys.argv[1] == "--help":
    usage()
    sys.exit(0)

tags = []
with open(sys.argv[1], "r") as outfile:
    tags = yaml.load(outfile)

todo = []
completed = []
for k in tags:
    todo.append(k)

print("Loaded yaml: %s" % str(tags))
print("To do: %s" % str(todo))

# run: run a command inside the image.
def process_run(OCI, run):
    if os.path.exists(run):
        if run_file(OCI, run) is not True:
            print("Failed running %s for %s" % (run, k))
            sys.exit(1)
    else:
        if run_shell(OCI, run)is not True:
            print("Failed executing shell for %s" % k)
            sys.exit(1)

def process_runs(OCI, tags, k):
    try:
        runs = tags[k]["run"]
    except:
        return
    if type(runs) is list:
        for r in runs:
            process_run(OCI, r)
    else:
        process_run(OCI, runs)

def copy_file(OCI, pair):
    copy = pair.split()
    if len(copy) != 2:
        print("Error: badly formed \"from to\" file copy spec: %s" % pair)
        sys.exit(1)
    OCI.CopyFile(copy[0], copy[1])

# copy: copy a file from host into image
def copy_files(OCI, tags, k):
    try:
        files = tags[k]["copy"]
    except:
        return
    if type(files) is list:
        for f in files:
            copy_file(OCI, f)
    else:
        copy_file(OCI, files)

def install_pkg(OCI, pkg):
    s = os.path.splitext(pkg)
    if len(s) != 2:
        print("Bad package name: %s" % pkg)
        sys.exit(1)
    if s[1] == ".deb":
        cmd = 'chroot %s dpkg -i %s' % (OCI.chrootdir, pkg)
    elif s[1] == ".rpm":
        cmd = 'chroot %s rpm -Uvh %s' % (OCI.chrootdir, pkg)
    else:
        print("Unknown package type: %s" % s[1])
        sys.exit(1)
    print("Installing package: %s" % pkg)
    ret = os.system(cmd)
    if ret != 0:
        print("Error installing")
        sys.exit(1)
    print ("%s installed" % pkg)

# install: install an rpm from the host
# arguments: a list of package filenames, separated by spaces
# Todo - support debs?
def install_pkgs(OCI, tags, k):
    try:
        files = tags[k]["install"]
    except:
        return
    pkglist = files.split()
    for p in pkglist:
        install_pkg(OCI, p)

def expand_tarball(OCI, tar):
    cmd = 'tar --acls --xattrs --auto-compress -xf %s -C %s' % (tar, OCI.chrootdir)
    print("Expanding tarball: %s" % tar)
    print("Expanding tarball %s into %s" % (tar, OCI.chrootdir))
    ret = os.system(cmd)
    if ret != 0:
        print("Error installing")
        sys.exit(1)
    print("%s expanded" % tar)

# expand: expand a tarball from the host
def expand_tarballs(OCI, tags, k):
    try:
        files = tags[k]["expand"]
    except:
        return
    pkglist = files.split()
    for p in pkglist:
        expand_tarball(OCI, p)

while len(todo) != 0:
    for k in todo:
        # check to see whether it depends on another not-completed base
        base = tags[k]["base"]
        if base in todo:
            continue
        todo.remove(k)

        print("Building %s" % k)
        # expand base
        if base == "empty":
            OCI.Unpack("empty")
        elif OCI.HasTag(base):
            OCI.Unpack(base)
        else:
            print("Unknown base: %s" % base)
            sys.exit(1)


        # Run the conversion step
        copy_files(OCI, tags, k)
        install_pkgs(OCI, tags, k)
        expand_tarballs(OCI, tags, k)
        process_runs(OCI, tags, k)

        do_tag(OCI, k)
        completed.append(k)

if os.path.exists(unpackdir):
    shutil.rmtree(unpackdir)
print("Done")
